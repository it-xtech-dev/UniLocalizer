@page "{handler?}"
@model ScriptModel
@inject IViewLocalizer L
@inject IStringLocalizerFactory LocalealizerFactory

@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@using System.Globalization

@{
    Layout = null;
}


    <script>
    (function () {
        
        @if (Model.JavascriptNamespace == "locale")
        {
            <text>
            window.locale = window.locale || {};
            var Locale = window.locale;
            </text>
        } 
        else
        {
            <text>
            var Locale = @Model.JavascriptNamespace;
            </text>
        }

        if (Object.keys(Locale).length === 0) {
            Locale.current = '@CultureInfo.CurrentCulture';
            Locale.scopes = {};
            Locale.add = function (scopeKey, value) {
                Locale.scopes[scopeKey] = value;
            };
            Locale.getScope = function (scopeKey) {
                var MISSING_SCOPE = '#MISS:' + Locale.currentCulture + ":" + scopeKey;
                if (!Locale.scopes[scopeKey]) {
                    throw MISSING_SCOPE;
                }
                return new (function (scopeKey) {
                    var thisInstance = this;
                    this.flatKeys = Locale.scopes[scopeKey];
                    this.get = function (key) {
                        var text = thisInstance.flatKeys[key];
                        if (text === undefined) {
                            @if (Model.LocalizerFactory.Options.IsTranslatorEnabled)
                            {
                            <text>
                            var isAutogenEnabled = @(Model.LocalizerFactory.Options.IsTranslatorEnabled ? "true" : "false");
                            var prefix = isAutogenEnabled ? "#AUTO" : "#MISS";
                            // when autogeneration enabled read value from the server so that would be autogenerated.
                            if (isAutogenEnabled) {
                                var url = '@Url.Page("/Index","GetText", new { area = "Localizer" })';
                                var generalKey = Locale.current + ":." + scopeKey + ":" + key;
                                var data = new FormData();
                                data.append('generalKey', generalKey);
                                _post(url, data, function () { console.log("GetText: " + generalKey) }, function (error) { throw error; });
                            }
                            return prefix + ":" + key;
                            </text>
                            } 
                            else
                            {
                            <text>
                                return "#MISS:" + key;
                            </text>
                            }
                        } 
                        if (text === "#AUTOGENERATED") return "#AUTO:" + key;

                        // add placeholder replace support .get("test {0}", 1) => "test 1";
                        var args = Array.prototype.slice.call(arguments, 1);
                        if (args.length > 0) {
                            text =  text.replace(/{(\d+)}/g, function(match, number) { 
                                return typeof args[number] != 'undefined'
                                ? args[number] 
                                : match
                                ;
                            });
                        }

                        return text;
                    }
                    this.keys = (function (scope) {
                        var result = {};
                        Object.keys(scope.flatKeys).map(function (key) {
                            result[key] = scope.get(key);
                        });
                        return unflatten(result);
                    })(this);
                })(scopeKey);
            };
            
            //https://stackoverflow.com/questions/42694980/how-to-unflatten-a-javascript-object-in-a-daisy-chain-dot-notation-into-an-objec
            function unflatten(json) {
                var result = {}
                for (var i in json) {
                    var keys = i.split('.')
                    keys.reduce(function (r, e, j) {
                        return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? json[i] : {}) : [])
                    }, result)
                }
                return result
            }
        };

        @foreach( var file in Model.RequestedResourceFiles)
        {
            <text>
            Locale.add('@Html.Raw(file.Key.Substring(7).Replace(":",""))', @Html.Raw(file.Content));
            </text>
        }

        // as soon as resources initialized assign "view" scope.
        // WARNING: this script can be emebeded multiple time with different scopes.

        /**
         * Return scope for current view (search as first added scope starting with "view.");
         * */
        Locale.view = (function () {
            var viewKeys = Object.keys(Locale.scopes).filter(function (key) {
                var pathKey = key.substring(0, 6).toLowerCase();
                return pathKey === "views." || pathKey === "pages.";
            });

            if (viewKeys[0]) return Locale.getScope(viewKeys[0]);
            else return null;
        })();


        @if (Model.LocalizerFactory.Options.IsTranslatorEnabled)
        {
        <text>
            function _post(url, fromData, onSuccess, onError) {
                var xhr = new XMLHttpRequest();
                xhr.onreadystatechange = () => {
                    if (xhr.readyState == 4) {
                        if (xhr.status == 200) {
                            onSuccess(xhr);
                        } else {
                            onError(xhr);
                        }
                    }
                };

                xhr.open("POST", url, true);
                //xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
                xhr.send(fromData);
        
                return xhr;       
            }             
        </text>
        }
})();
</script>